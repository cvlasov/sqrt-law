% -------------------------------------------------------------------------
% Running the low-complexity linear classifier on JRM features
% -------------------------------------------------------------------------
% Author: Catherine Vlasov
% -------------------------------------------------------------------------
% This function runs LCLSMR on the features generated by the JRM feature
% extractor. It is mostly based on the tutorial available at
% http://dde.binghamton.edu/download/LCLSMR.
% -------------------------------------------------------------------------
% Original tutorial:
%     Copyright (c) 2015 DDE Lab, Binghamton University, NY.
%     Copyright (c) 2015 LM2S Lab, Troyes Univ. of Technology, FR.
%     All Rights Reserved.
%     Contact: vsedigh1@binghamton.edu
%              remi.cogranne@utt.fr
%              fridrich@binghamton.edu
%              Tomas.Pevny@agents.fel.cvut.cz
%              http://dde.binghamton.edu/download/LCLSMR
% -------------------------------------------------------------------------

function juniward_test(cover_fea_mat, stego_fea_mat)

% Load cover/stego features. These features correspond to JRM features
% extracted from J-UNIWARD steganography at payload 0.1 bits per nzac.
% Used JPEG quality factor = 80.
cover = importdata(cover_fea_mat);
stego = importdata(stego_fea_mat);

% Both loaded structures contain fields 'F' and 'names'. F is a feature
% matrix with individual samples in rows and individual features in
% columns, i.e., the number of columns corresponds to the feautre-space
% dimensionality. Field 'names' contains image filenames of the
% corresponding cover (or stego) images. Note that this format is
% consistent with the previous version of our ensemble implementation.

% Restriction only to images that have both cover and stego features (only
% those will be considered)
names = intersect(cover.names,stego.names);
names = sort(names);

% Prepare cover features C
cover_names = cover.names(ismember(cover.names,names));
[cover_names,ix] = sort(cover_names);
C = cover.F(ismember(cover.names,names),:);
C = C(ix,:);

% Prepare stego features S
stego_names = stego.names(ismember(stego.names,names));
[stego_names,ix] = sort(stego_names);
S = stego.F(ismember(stego.names,names),:);
S = S(ix,:);

% At this point, we have the cover features C and the corresponding
% stego features S. They are correctly synchronized, i.e., the i-th row of
% the  stego matrix S comes from the stego image that was created from the
% cover image with features in the i-th row of the cover matrix C.

% Finally we remove all of the constants features over the whole dataset
D=size(C,2);
varC = var(C,1);
remove = false(1,D);
adepts = unique([find(C(1,:)==C(2,:)) find(S(1,:)==S(2,:))]);
for ad_id = adepts
    U1=unique(C(:,ad_id));
    if numel(U1)==1
        U2=unique(S(:,ad_id));
        if numel(U2)==1, if U1==U2, remove(ad_id) = true; end; end
    end
end
% and also check for NaN values (may occur when the feature value is
% constant over images)
nan_values = (isnan(varC))>0;
remove = nan_values | remove;
C = C(:,~remove);
S = S(:,~remove);
clear varC;

% Now we can prepare a training set and a testing set.

% PRNG initialization with seed 1
Matlabversion = version('-release');
Matlabversion = str2num(Matlabversion(1:end-1));
if (Matlabversion>=2012)
    RandStream.setGlobalStream(RandStream('mt19937ar','Seed',1));
else
    RandStream.setDefaultStream(RandStream('mt19937ar','Seed',1));
end

% Division into training/testing set (half/half & preserving pairs)
random_permutation = randperm(size(C,1));
training_set = random_permutation(1:round(size(C,1)/2));
testing_set = random_permutation(round(size(C,1)/2)+1:end);
training_names = names(training_set);
testing_names = names(testing_set);

% Prepare training features
TRN_cover = C(training_set,:);
TRN_stego = S(training_set,:);

% Prepare testing features
TST_cover = C(testing_set,:);
TST_stego = S(testing_set,:);

% Train and Test using the linear classifier with all default settings
[Results] = LCLSMR (TRN_cover, TRN_stego, TST_cover, TST_stego, true);

% That's pretty much it. For reporting steganalysis results, it is a good
% habit to repeat the experiment several times (for example 10 times) for
% different training/testing splits.
end
